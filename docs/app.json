[{"name":"app.R","content":"library(shiny)\r\nlibrary(httr)\r\nlibrary(jsonlite)\r\nlibrary(tidyverse)\r\n\r\n# to deploy: shinylive::export(appdir = \"build_mana_base\", destdir = \"docs\")\r\n\r\n# NB: inequality signs do not seem to work with the API, <=, >=, <, >\r\n# leq signs and colon seem fine... ≤, ≥, :\r\n\r\nbase_url <- \"https://api.scryfall.com\"\r\n\r\nid_to_types <- function(col_str, query = \"t\") {\r\n  types <- str_split_1(col_str, \"\") %>% \r\n    str_replace_all(c(\"w\" = \"plains\",\r\n                      \"u\" = \"island\",\r\n                      \"b\" = \"swamp\",\r\n                      \"r\" = \"mountain\",\r\n                      \"g\" = \"forest\"))\r\n  \r\n  paste0(query, \":\", types) %>% \r\n    paste(collapse = \" or \") %>% \r\n    paste0(\"(\", ., \")\")\r\n  \r\n}\r\n\r\nscryfall_list <- function(query_str) {\r\n  query_html <- query_str %>% \r\n    utf8::as_utf8() %>%\r\n    RCurl::curlPercentEncode() %>% \r\n    str_replace_all(\"\\\\%20\", \"+\")\r\n  \r\n  sf_out <- GET(url = paste0(base_url, \r\n                             \"/cards/search?q=\",\r\n                             query_html))\r\n  \r\n  out_vec <- map_chr(content(sf_out)[[4]], ~.x$name)\r\n  \r\n  c(paste0(\"N = \", length(out_vec)), out_vec) %>% \r\n    paste(collapse = \"\\n\") %>% \r\n    cat()\r\n  \r\n  invisible(out_vec)\r\n}\r\n\r\nbuild_mana_base <- function(\r\n    col_str, \r\n    types = c(\"fetchland\", \"shockland\", \"surveilland\", \"dual\", \"triome\")\r\n) {\r\n  \r\n  if (str_length(col_str) == 0) {\r\n    return(NULL)\r\n  }\r\n  \r\n  land_nick <- c(\"bikeland\", \"cycleland\", \"bicycleland\", \"bounceland\", \"karoo\", \r\n                 \"canopyland\", \"canland\", \"checkland\", \"dual\", \"fastland\", \r\n                 \"filterland\", \"gainland\", \"painland\", \"scryland\", \"shadowland\", \r\n                 \"shockland\", \"storageland\", \"creatureland\", \"triland\", \r\n                 \"triome\", \"tangoland\", \"battleland\")\r\n  \r\n  query_vec <- character(0)\r\n  \r\n  if (\"fetchland\" %in% types) {\r\n    query_vec <- c(query_vec,\r\n                   paste(\"is:fetchland\", id_to_types(col_str, query = \"o\")))\r\n    \r\n    if (any(str_detect(types, \"basic\"))) {\r\n      query_vec <- c(query_vec,\r\n                     \"Prismatic Vista\")\r\n    }\r\n  }\r\n  \r\n  if (\"snowbasic\" %in% types) {\r\n    query_vec <- c(query_vec,\r\n                   paste(\"t:snow t:basic\", id_to_types(col_str, query = \"t\")))\r\n  }\r\n  \r\n  if (\"basic\" %in% types) {\r\n    query_vec <- c(query_vec,\r\n                   paste(\"-t:snow t:basic\", id_to_types(col_str, query = \"t\")))\r\n  }\r\n  \r\n  if (\"surveilland\" %in% types) {\r\n    query_vec <- c(query_vec,\r\n                   paste0(\"o:surveil t:land e:mkm id:\", col_str))\r\n  }\r\n  \r\n  if (\"channelland\" %in% types) {\r\n    query_vec <- c(query_vec,\r\n                   paste0(\"t:land kw:channel id:\", col_str))\r\n  }\r\n  \r\n  if (\"mdfc\" %in% types) {\r\n    query_vec <- c(query_vec,\r\n                   paste0(\"t:land is:mdfc is:spell id:\", col_str))\r\n  }\r\n  \r\n  if (\"mh3dfc\" %in% types) {\r\n    query_vec <- c(query_vec,\r\n                   paste0(\"t:land is:mdfc is:spell e:mh3 id:\", col_str))\r\n  }\r\n  \r\n  query_vec <- c(query_vec,\r\n                 map_chr(intersect(types, land_nick), ~paste0(\"is:\", .x)) %>% \r\n                   paste(collapse = \" or \") %>% \r\n                   paste0(\"(\", ., \") id:\", col_str))\r\n  \r\n  query_str <- paste0(\"(\", paste(query_vec, collapse = \") or (\"), \")\")\r\n  \r\n  scryfall_list(query_str)\r\n}\r\n\r\n\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n\r\n    # Application title\r\n    titlePanel(\"Singleton manabase generator\"),\r\n\r\n    # Sidebar with a slider input for number of bins \r\n    sidebarLayout(\r\n        sidebarPanel(\r\n            # textInput(\"query_str\",\r\n            #             \"Free text query:\",\r\n            #           value = \"t:land t:artifact -o:'~ enters the battlefield tapped.' -is:dfc\")\r\n          checkboxGroupInput(\"colors\",\r\n                        label = \"Select colors\",\r\n                        choices = c(\"White\" = \"w\",\r\n                                    \"Blue\" = \"u\",\r\n                                    \"Black\" = \"b\",\r\n                                    \"Red\" = \"r\",\r\n                                    \"Green\" = \"g\")),\r\n          checkboxGroupInput(\"types\",\r\n                             label = \"Select types\",\r\n                             choices = c(\"bicycleland\", \"bounceland\", \r\n                                         \"canopyland\", \"checkland\", \"dual\", \r\n                                         \"fastland\", \"fetchland\", \"filterland\", \r\n                                         \"gainland\", \"painland\", \"scryland\",\r\n                                         \"shadowland\", \"shockland\", \r\n                                         \"storageland\", \"creatureland\", \r\n                                         \"triland\", \"tangoland\", \"snowbasic\", \r\n                                         \"basic\", \"surveilland\", \"channelland\", \r\n                                         \"mdfc\", \"mh3dfc\", \"triome\"),\r\n                             selected = c(\"fetchland\", \"shockland\", \"basic\",\r\n                                          \"surveilland\", \"dual\", \"triome\"))\r\n        ),\r\n\r\n        # Show a plot of the generated distribution\r\n        mainPanel(\r\n          verbatimTextOutput(\"cardlist\")\r\n        )\r\n    )\r\n)\r\n\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output) {\r\n\r\n    output$cardlist <- renderText({\r\n      \r\n      out_vec <- build_mana_base(paste(input$colors, collapse = \"\"),\r\n                                 types = input$types)\r\n      \r\n      # scryfall_list(input$query_str)\r\n      \r\n      c(paste0(\"N = \", length(out_vec)), out_vec) %>% \r\n        paste(collapse = \"\\n\")\r\n    })\r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
